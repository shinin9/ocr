# -*- coding: utf-8 -*-
"""data_aug

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dp-lYD86AoQQPdSGwCip7CXmHN0BL3oC
"""

from PIL import Image
import cv2
import numpy as np
import time
import torch
import torchvision
from torch.utils.data import Dataset
from torchvision import transforms
from matplotlib import pyplot as plt
import os
import random
from tqdm import tqdm


train_path = '/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/train'
os.chdir(train_path)
train_file_list = os.listdir(train_path)

test_path = '/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/test'
os.chdir(test_path)
test_file_list = os.listdir(test_path)

val_path = '/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/val'
os.chdir(val_path)
val_file_list = os.listdir(val_path)


def display_augmented_images(aug_f, files, a):

    save_root_path = "/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist_aug/"
    #gt_file = open('/data_labeling_aug/gt_a', 'a')
    #f = open('./data/gt.txt', 'r')
    #data = f.read().splitlines()
    #gt_data = [x.split() for x in data]

    train_path = '/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/train'
    os.chdir(train_path)
    train_file_list = os.listdir(train_path)

    test_path = '/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/test'
    os.chdir(test_path)
    test_file_list = os.listdir(test_path)

    val_path = '/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/val'
    os.chdir(val_path)
    val_file_list = os.listdir(val_path)

    err = 0

    for i in tqdm(range(len(files))):

        # train/val/test 안 나누고 한번에 할 때 사용
        train_ratio = len(files) * 0.6
        test_ratio = train_ratio + len(files) * 0.2
        val_ratio = test_ratio + len(files) * 0.2

        random.seed(0)
        random.shuffle(files)

        # img = cv2.imread('/content/drive/MyDrive/MNIST/mnist/train/'+files[i])
        if files[i] in train_file_list:
            img = cv2.imread('/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/train/'+files[i])

        elif files[i] in val_file_list:
            img = cv2.imread('/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/val/'+files[i])

        else:
            img = cv2.imread('/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/test/'+files[i])

        # img = Image.open('./train/'+files[i])
        try:
            original_img = Image.fromarray(img)
            if a == 'noise_injection':
                augmented_img = aug_f(img)
            elif a == 'random_erasing':
                img = torch.tensor(img)
                augmented_img = aug_f(img)
            else:
                augmented_img = aug_f(original_img)

            augmented_img = np.array(augmented_img)
        except Exception:
            err += 1
            pass

        aug_file_name = '{}_{}.jpg'.format(files[i][:-4], a)

        if i <= train_ratio:
            cv2.imwrite(save_root_path+'train/'+aug_file_name, augmented_img)
        elif i > train_ratio and i <= test_ratio:
            cv2.imwrite(save_root_path+'test/'+aug_file_name, augmented_img)
        else:
            cv2.imwrite(save_root_path+'val/'+aug_file_name, augmented_img)

        # cv2.imwrite(save_root_path+'train/'+aug_file_name, augmented_img)
        if err > 0:
            print(f'{a}에서 {err}개 실패')

        #gt_file.write("train/{}\t{}\n".format(aug_file_name, label))


####### Flip ########
f = open('/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/gt_test.txt', 'r') # 경로 설정
f2 = open('/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/gt_train.txt', 'r')
f3 = open('/home/dfx/Desktop/yujeong/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_mnist/gt_val.txt', 'r')

vertical_files = []
horizontal_files = []

data = f.read().splitlines()
aa = [x.split() for x in data]
for i in range(len(aa)):
    if aa[i][1] == '0' or aa[i][1] == '8':
        vertical_files.append(aa[i][0][-15:]) # 파일명에 따라 수정
        horizontal_files.append(aa[i][0][-15:])
    elif aa[i][1] == '3' or aa[i][1] == '30':
        vertical_files.append(aa[i][0][-15:])
    elif aa[i][1] == 'A':
        horizontal_files.append(aa[i][0][-15:])

data2 = f2.read().splitlines()
aa2 = [x.split() for x in data2]
for i in range(len(aa2)):
    if aa2[i][1] == '0' or aa2[i][1] == '8':
        vertical_files.append(aa2[i][0][-15:])
        horizontal_files.append(aa2[i][0][-15:])
    elif aa2[i][1] == '3' or aa2[i][1] == '30':
        vertical_files.append(aa2[i][0][-15:])
    elif aa2[i][1] == 'A':
        horizontal_files.append(aa2[i][0][-15:])

data3 = f3.read().splitlines()
aa3 = [x.split() for x in data3]
for i in range(len(aa3)):
    if aa3[i][1] == '0' or aa3[i][1] == '8':
        vertical_files.append(aa3[i][0][-15:])
        horizontal_files.append(aa3[i][0][-15:])
    elif aa3[i][1] == '3' or aa3[i][1] == '30':
        vertical_files.append(aa3[i][0][-15:])
    elif aa3[i][1] == 'A':
        horizontal_files.append(aa3[i][0][-15:])

# vertical
a = 'vertical'

flip = transforms.RandomVerticalFlip(p=1)
display_augmented_images(flip, vertical_files, a)

# horizontal
a = 'horizontal'

flip = transforms.RandomHorizontalFlip(p=1)
display_augmented_images(flip, horizontal_files, a)

######## Flip 이외의 기법들 #######
# path = '/content/drive/MyDrive/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data/all_img'
# os.chdir(path)
# file_list = os.listdir(path)


def aug(file_list):

    # rotation
    a = 'rotation'

    aug_f = transforms.RandomAffine(10)
    display_augmented_images(aug_f, file_list, a)

    # color_space
    a = 'color_space'

    aug_f = transforms.ColorJitter(brightness=(0.2, 3))
    display_augmented_images(aug_f, file_list, a)

    aug_f = transforms.ColorJitter(contrast=(0.2, 3))
    display_augmented_images(aug_f, file_list, a)

    aug_f = transforms.ColorJitter(saturation=(0.2, 3))
    display_augmented_images(aug_f, file_list, a)

    aug_f = transforms.ColorJitter(hue=(-0.5, 0.5))
    display_augmented_images(aug_f, file_list, a)

    aug_f = transforms.ColorJitter(brightness=(0.2, 2),
                                   contrast=(0.3, 2),
                                   saturation=(0.2, 2),
                                   hue=(-0.3, 0.3))
    display_augmented_images(aug_f, file_list, a)

    # noise injection

    def noise_inject(img):

        row, col, ch = img.shape
        mean = 0
        var = 0.1
        sigma = var**0.5
        gauss = np.random.normal(mean, sigma, (row, col, ch))
        gauss = gauss.reshape(row, col, ch)
        noisy_array = img + gauss
        noisy_image = Image.fromarray(np.uint8(noisy_array)).convert('RGB')

        return noisy_image


    a = 'noise_injection'

    aug_f = noise_inject
    display_augmented_images(aug_f, file_list, a)

    # kernel_filter
    a = 'kernel_filter'

    kernel_size = (3, 3)
    aug_f = transforms.GaussianBlur(kernel_size=kernel_size, sigma=(0.1,.2))
    display_augmented_images(aug_f, file_list, a)

    # GaussianBlur
    a = 'GaussianBlur'

    kernel_size = (3, 3)
    aug_f = transforms.GaussianBlur(kernel_size=kernel_size, sigma=(3,7))
    display_augmented_images(aug_f, file_list, a)

    # random_erasing
    a = 'random_erasing'

    aug_f = transforms.RandomErasing(p=1, scale=(0.02, 0.33), ratio=(0.3, 1.3))
    display_augmented_images(aug_f, file_list, a)


aug(train_file_list)
aug(test_file_list)
aug(val_file_list)



def make_gt_file(): # 상황에 따라

    train_path = '/content/drive/MyDrive/MNIST/mnist/train'
    os.chdir(train_path)
    train_file_list = os.listdir(train_path)

    test_path = '/content/drive/MyDrive/MNIST/mnist/test'
    os.chdir(test_path)
    test_file_list = os.listdir(test_path)

    val_path = '/content/drive/MyDrive/MNIST/mnist/val'
    os.chdir(val_path)
    val_file_list = os.listdir(val_path)

    gt_train = open('/content/drive/MyDrive/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_labeling_aug/gt_train_a.txt','a')
    gt_val = open('/content/drive/MyDrive/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_labeling_aug/gt_val_a.txt','a')
    gt_test = open('/content/drive/MyDrive/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data_labeling_aug/gt_test_a.txt','a')
    gt = open('/content/drive/MyDrive/Project_OCR/easyOCRtest/deep-text-recognition-benchmark/data/gt.txt', 'r')
    lines = gt.readlines()
    lines = list(set(lines))
    lines = sorted(lines)

    for i in tqdm(range(len(lines))):
        li = lines[i].split('\t')
        for j in range(len(train_file_list)):
            if li[0][:8] in train_file_list[j]:
                gt_train.write("train/{}\t{}".format(train_file_list[j], li[1]))

        for k in range(len(test_file_list)):
            if li[0][:8] in test_file_list[k]:
                gt_test.write("test/{}\t{}".format(test_file_list[k], li[1]))

        for l in range(len(val_file_list)):
            if li[0][:8] in val_file_list[l]:
                gt_val.write("val/{}\t{}".format(val_file_list[l], li[1]))



